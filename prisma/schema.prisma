// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int     @id @default(autoincrement())
  name         String
  email        String  @unique
  type         String?
  status       String?
  phone        String?
  photoURL     String?
  details      Json?
  refreshToken String? @db.Text
  publicKey    String?
  secretKey    String?

  adminId Int?
  User    User? @relation("Admin", fields: [adminId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  Category Category[]
  Bill  Bill[]
  Admin    User[]     @relation("Admin")
}

model Category {
  id   Int    @id @default(autoincrement())
  name String

  userId Int
  User   User @relation(fields: [userId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  Item Item[]
}

model Item {
  id        Int      @id @default(autoincrement())
  name      String
  price     Int?
  status    String?
  image     String?

  categoryId Int
  Category   Category @relation(fields: [categoryId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
}

model Lot {
  id     Int     @id @default(autoincrement())
  name   String
  code   String
  amount Int?
  status String?
  qrcode  String?

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  Bill  Bill[]
}

model Bill {
  id     Int     @id @default(autoincrement())
  code    String
  status String?
  people  Int?

  userId  Int
  User    User @relation(fields: [userId], references: [id])
  lotId   Int
  Lot   Lot @relation(fields: [lotId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
  
  Order Order[]
}

model Order {
  id Int @id @default(autoincrement())
  orderedBy String
  status  String
  items Json
  billId Int
  Bill   Bill @relation(fields: [billId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
}